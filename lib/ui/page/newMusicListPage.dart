import 'dart:async';
import 'dart:convert';
import 'dart:io';

import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_app/dialog/bottom/bottomdialog.dart';
import 'package:flutter_app/dialog/customdialog.dart';
import 'package:flutter_app/http/Config.dart';
import 'package:flutter_app/model/BannerBean.dart';
import 'package:flutter_app/model/lrc/songInfoLrc.dart';
import 'package:flutter_app/model/lrc/songlrc.dart';
import 'package:flutter_app/model/song/SongInfoModel.dart';
import 'package:flutter_app/model/song/newSongModel.dart';
import 'package:flutter_app/widget/banner_page.dart';

class NewMusicListPage extends StatefulWidget{

  @override
  State<StatefulWidget> createState() {
    // TODO: implement createState
    return new NewMusicListPageState();
  }

}
const _platform = const MethodChannel('com.mrper.framework.plugins/toast');
const _musicPlatform = const MethodChannel('com.mrper.framework.plugins/music');
const sendMessagePlugin =
const EventChannel('com.flutter.app/sendmessageplugin');
const _lrcPlatform = const MethodChannel('com.mrper.framework.plugins/lrc');
SongInfo songInfo;
BottomDialog bottomDialog;
BuildContext playContext;
var loadingDialog;
void playMusic(String lrc) {
  var imageUrl = songInfo.albumImg.replaceAll("{size}", "");
  _musicPlatform
      .invokeMethod('play', {'url': "${songInfo.url}"}); //调用相应方法，并传入相关参数。
  if (bottomDialog == null) {
    bottomDialog = new BottomDialog();
    bottomDialog.updateDialogData(
        imageUrl, songInfo.songName, songInfo.singerName, lrc);
    bottomDialog.showBottomDialog(playContext, _platform, _musicPlatform);
  } else {
    bottomDialog.updateDialogData(
        imageUrl, songInfo.songName, songInfo.singerName, lrc);
  }
  loadingDialog.dialog.dimissDialog();
}



class NewMusicListPageState extends State<StatefulWidget>{
  List<Data> songlist;
  Autogenerated mAutogenerated;
  // 跨域访问
  // banner 数据集合
  List<BannerBean> bannerData;
  GlobalKey<BannerWidgetState> globalKey = new GlobalKey<BannerWidgetState>();
  List<BannerBean> bannerList = new List();
//声明一个调用对象，需要把kotlin中注册的ChannelName传入构造函数
  var MUSIC_DATA_URL = "http://m.kugou.com/?json=true";

  @override
  void initState() {
    // TODO: implement initState
    super.initState();

    getMusicData(MUSIC_DATA_URL);
  }



  DateTime lastPopTime;


  Future<dynamic> getMusicData(var url) async {
    if(songlist!=null&&songlist.length>0){
      return;
    }
    var httpClient = new HttpClient();
    var request = await httpClient.getUrl(Uri.parse(url));
    var response = await request.close();
    var responseBody = await response.transform(Utf8Decoder()).join();
    print("getMusicData.responseBody:" + responseBody);
    Autogenerated autogenerated =
    Autogenerated.fromJson(json.decode(responseBody));

    // 刷新页面
    setState(() {
      songlist = autogenerated.data;
      mAutogenerated = autogenerated;
      _initBannerData();
    });
  }
  /**
   * 初始化 banner 数据
   * */
  List<BannerBean> _initBannerData() {
    if (mAutogenerated != null &&
        mAutogenerated.banner != null &&
        mAutogenerated.banner.length > 0) {
      bannerList.clear();
      for (var item in mAutogenerated.banner) {
        bannerList.add(new BannerBean(
            imageUrl: item.imgurl, titleStr: "flutter云音乐", intentType: 0));
      }
    } else {
      bannerList.add(new BannerBean(
          imageUrl:
          "http://img.pconline.com.cn/images/upload/upc/tx/bbs6/1010/24/c1/5622801_1287922101936_1024x1024.jpg",
          titleStr: "flutter云音乐",
          intentType: 0));
    }
    // 2 秒后启动轮播
    Timer timer;
    timer = new Timer(new Duration(milliseconds: 200), () {
      if (globalKey != null) {
        globalKey.currentState.start();
      }
      timer.cancel();
      timer = null;
    });

    return bannerList;
  }

  BannerWidget bannerWidget;


  @override
  Widget build(BuildContext context) {
    // TODO: implement build

    return _widget();
  }
  Widget _widget(){
    return new Container(
      child: Column(
        children: <Widget>[
          Expanded(
            flex: 1, //pageview 所占布局比
            child: getBannerWidget(),
          ),
          Expanded(
              flex: 3, //listview 所占布局比
              child: SongMusicListview(context))
        ],
      ),
    );
  }
  BannerWidget getBannerWidget() {
    if (bannerWidget == null) {
      bannerWidget = new BannerWidget(
        key: globalKey,
        bannerData: _initBannerData(),
        bannerDuration: 5000,
        bannerSwitch: 500,
        bannerPress: _bannerPress,
        bannerBuild: (position, BannerBean) {
          if (BannerBean != null)
            return Image.network(BannerBean.bannerUrl, fit: BoxFit.fitWidth);
        },
      );
    }
    return bannerWidget;
  }
  /**
   * banner 点击事件监听
   * */
  void _bannerPress(int position, BannerBean entity) {
    print(position);
    print(entity.titleStr + entity.imageUrl);
  }
  /**
   *  构建listview
   */
  Widget SongMusicListview(BuildContext context) {
    playContext = context;
    ListView listView;
        listView = new ListView.builder(
            itemCount:
            (songlist != null && songlist.length > 0 ? songlist.length : 0),
            shrinkWrap: true,
            itemBuilder: (context, index) {
              return new ListTile(
                leading: new Icon(Icons.branding_watermark),
                title: new Text("${songlist[index].filename}"),
                onTap: () {
                  getSongInfo(Config.SONG_INFO_URL + songlist[index].hash,
                      context, songlist[index].hash);
                },
              );
            });

    return listView;
  }

  /**
   * 获取歌曲详细信息
   */
  Future<dynamic> getSongInfo(var url, BuildContext context, var hashCode) async {
    loadingDialog = new LoadingDialog(
      outsideDismiss: true,
      dismissCallback: _disMissCallBack(context),
    );
    loadingDialog.initDialog();
    loadingDialog.createState();
    showDialog(
        context: context,
        builder: (context) {
          return loadingDialog;
        });
    var httpClient = new HttpClient();
    var request = await httpClient.getUrl(Uri.parse(url));
    var response = await request.close();
    var responseBody = await response.transform(Utf8Decoder()).join();
    print("getSongInfo.responseBody:" + responseBody);
    try {
      songInfo = SongInfo.fromJson(json.decode(responseBody));
    } catch (e) {
      _platform.invokeMethod('showall', {'msg': "接口异常"}); //调用相应方法，并传入相关参数。
      initVirtualData();
    }
    if (songInfo != null) {
      getLrc(Config.SONG_GET_LRC_URL + hashCode);
    } else {
      loadingDialog.dialog.dimissDialog();
    }
  }
  //这个func 就是关闭Dialog的方法
  _disMissCallBack(BuildContext context) {}
  /**
   * 获取歌词信息
   */
  Future<dynamic> getLrc(var url) async {
    var httpClient = new HttpClient();
    var request = await httpClient.getUrl(Uri.parse(url));
    var response = await request.close();
    var responseBody = await response.transform(Utf8Decoder()).join();
    print("getLrc.responseBody:" + responseBody);
    SongLrc songLrc = SongLrc.fromJson(json.decode(responseBody));
    if (songLrc != null) {
      String lrcId = songLrc.candidates[0].id;
      String lrcAccesskey = songLrc.candidates[0].accesskey;
      String url = "http://lyrics.kugou.com/download?ver=1&client=pc&id=" +
          lrcId +
          "&accesskey=" +
          lrcAccesskey +
          "&fmt=krc&charset=utf8";

      getLrcInfo(url, songLrc.candidates[0].accesskey);
    }
  }
  /**
   * 获取歌词详细信息
   */
  Future<dynamic> getLrcInfo(var url, var hashCode) async {
    var httpClient = new HttpClient();
    var request = await httpClient.getUrl(Uri.parse(url));
    var response = await request.close();
    var responseBody = await response.transform(Utf8Decoder()).join();
    print("getLrcInfo-----url:" + url);
    print("getLrcInfo.responseBody:" + responseBody);
    SongInfoLrc songInfoLrc = SongInfoLrc.fromJson(json.decode(responseBody));
    if (songInfoLrc != null) {
      print("songInfoLrc != null:");

      _lrcPlatform
          .invokeMethod('lrc', {'lrc': songInfoLrc.content, 'lrcName': hashCode});
    }
  }

  /**
   * 构造虚拟数据
   */
  void initVirtualData() {
    songInfo = new SongInfo();
    songInfo.imgUrl =
    "https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=717747993,1697525243&fm=15&gp=0.jpg";
    songInfo.albumImg =
    "https://ss0.bdstatic.com/70cFuHSh_Q1YnxGkpoWK1HF6hhy/it/u=2972144875,3220556455&fm=26&gp=0.jpg";
    songInfo.hash = "CB7EE97F4CC11C4EA7A1FA4B516A5D97";
    songInfo.songName = "刚好遇见你";
    songInfo.singerName = "李玉刚";
    songInfo.url = "http://www.ytmp3.cn/down/65892.mp3";
  }
}



